{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BButton, BModal, BFormGroup, BFormInput, BFormTextarea, BFormSelect } from \"bootstrap-vue\";\nexport default {\n  components: {\n    BButton,\n    BModal,\n    BFormGroup,\n    BFormInput,\n    BFormTextarea,\n    BFormSelect\n  },\n  data() {\n    return {\n      // items were we are storing data of employees \n      items: [],\n      //single item stored temporiraly in the page till being sent\n      form: {\n        name: \"\",\n        startDate: \"\"\n      }\n    };\n  },\n  methods: {\n    // editTask: function (task) {\n    //   console.log(\"afldf\");\n    //   this.$router.push({ name: \"editTask\", params: { id: task.id } });\n    // },\n    erase: function () {\n      this.form.name = \"\";\n      this.form.description = \"\", this.form.selected = \"\";\n    },\n    saveTask: function () {\n      this.taskList.push({\n        id: this.taskList.length + 1,\n        name: this.form.name,\n        description: this.form.description,\n        selected: this.form.selected\n      });\n      localStorage.setItem(\"taskList\", JSON.stringify(this.taskList));\n    },\n    checkFormValidity() {\n      const valid = this.$refs.form.checkValidity();\n      this.nameState = valid;\n      return valid;\n    },\n    resetModal() {\n      this.name = \"\";\n      this.nameState = null;\n    },\n    handleOk(bvModalEvent) {\n      // Prevent modal from closing\n      bvModalEvent.preventDefault();\n      // Trigger submit handler\n      this.handleSubmit();\n    },\n    handleSubmit() {\n      // Exit when the form isn't valid\n      if (!this.checkFormValidity()) {\n        return;\n      }\n      // Push the name to submitted names\n      this.submittedNames.push(this.name);\n      // Hide the modal manually\n      this.$nextTick(() => {\n        this.$bvModal.hide(\"modal-prevent-closing\");\n      });\n    }\n  },\n  mounted() {\n    this.taskList = JSON.parse(localStorage.getItem(\"taskList\")) || [];\n  }\n};","map":{"version":3,"names":["BButton","BModal","BFormGroup","BFormInput","BFormTextarea","BFormSelect","components","data","items","form","name","startDate","methods","erase","description","selected","saveTask","taskList","push","id","length","localStorage","setItem","JSON","stringify","checkFormValidity","valid","$refs","checkValidity","nameState","resetModal","handleOk","bvModalEvent","preventDefault","handleSubmit","submittedNames","$nextTick","$bvModal","hide","mounted","parse","getItem"],"sources":["src/components/EmployeeComponents/EmployeeAddingFeature.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <b-button v-b-modal.modal-prevent-closing @click=\"erase\">Add Employee</b-button>\r\n    <div>\r\n      <b-table\r\n        striped\r\n        hover\r\n        :items=\"items\"\r\n        @row-clicked=\"editTask\"\r\n      ></b-table>\r\n    </div>\r\n    <b-modal\r\n      id=\"modal-prevent-closing\"\r\n      ref=\"modal\"\r\n      title=\"Adding New Task\"\r\n      @show=\"resetModal\"\r\n      @hidden=\"resetModal\"\r\n      @ok=\"saveTask\"\r\n    >\r\n      <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\r\n        <b-form-group\r\n          label=\"Name\"\r\n          label-for=\"name-input\"\r\n          invalid-feedback=\"Name is required\"\r\n          :state=\"nameState\"\r\n        >\r\n          <b-form-input\r\n            id=\"name-input\"\r\n            v-model=\"form.name\"\r\n            :state=\"nameState\"\r\n            required\r\n          ></b-form-input>\r\n        </b-form-group>\r\n        <b-form-textarea\r\n          id=\"textarea\"\r\n          v-model=\"form.description\"\r\n          placeholder=\"Enter something...\"\r\n          rows=\"3\"\r\n          max-rows=\"6\"\r\n        ></b-form-textarea>\r\n\r\n        <b-form-select\r\n          v-model=\"form.selected\"\r\n          :options=\"form.statusOptions\"\r\n          size=\"sm\"\r\n          class=\"mt-3\"\r\n        ></b-form-select>\r\n      </form>\r\n    </b-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  BButton,\r\n  BModal,\r\n  BFormGroup,\r\n  BFormInput,\r\n  BFormTextarea,\r\n  BFormSelect,\r\n} from \"bootstrap-vue\";\r\n\r\nexport default {\r\n  components: {\r\n    BButton,\r\n    BModal,\r\n    BFormGroup,\r\n    BFormInput,\r\n    BFormTextarea,\r\n    BFormSelect,\r\n  },\r\n  data() {\r\n    return {\r\n      // items were we are storing data of employees \r\n      items: [],\r\n      //single item stored temporiraly in the page till being sent\r\n      form: {\r\n        name: \"\",\r\n        startDate: \"\",\r\n      },\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    // editTask: function (task) {\r\n    //   console.log(\"afldf\");\r\n    //   this.$router.push({ name: \"editTask\", params: { id: task.id } });\r\n    // },\r\n    erase: function () {\r\n      this.form.name = \"\";\r\n      (this.form.description = \"\"), (this.form.selected = \"\");\r\n    },\r\n    saveTask: function () {\r\n      this.taskList.push({\r\n        id: this.taskList.length + 1,\r\n        name: this.form.name,\r\n        description: this.form.description,\r\n        selected: this.form.selected,\r\n      });\r\n      localStorage.setItem(\"taskList\", JSON.stringify(this.taskList));\r\n    },\r\n    checkFormValidity() {\r\n      const valid = this.$refs.form.checkValidity();\r\n      this.nameState = valid;\r\n      return valid;\r\n    },\r\n    resetModal() {\r\n      this.name = \"\";\r\n      this.nameState = null;\r\n    },\r\n    handleOk(bvModalEvent) {\r\n      // Prevent modal from closing\r\n      bvModalEvent.preventDefault();\r\n      // Trigger submit handler\r\n      this.handleSubmit();\r\n    },\r\n    handleSubmit() {\r\n      // Exit when the form isn't valid\r\n      if (!this.checkFormValidity()) {\r\n        return;\r\n      }\r\n      // Push the name to submitted names\r\n      this.submittedNames.push(this.name);\r\n      // Hide the modal manually\r\n      this.$nextTick(() => {\r\n        this.$bvModal.hide(\"modal-prevent-closing\");\r\n      });\r\n    },\r\n  },\r\n  mounted() {\r\n    this.taskList = JSON.parse(localStorage.getItem(\"taskList\")) || [];\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";AAqDA,SACAA,OAAA,EACAC,MAAA,EACAC,UAAA,EACAC,UAAA,EACAC,aAAA,EACAC,WAAA,QACA;AAEA;EACAC,UAAA;IACAN,OAAA;IACAC,MAAA;IACAC,UAAA;IACAC,UAAA;IACAC,aAAA;IACAC;EACA;EACAE,KAAA;IACA;MACA;MACAC,KAAA;MACA;MACAC,IAAA;QACAC,IAAA;QACAC,SAAA;MACA;IACA;EACA;EAEAC,OAAA;IACA;IACA;IACA;IACA;IACAC,KAAA,WAAAA,CAAA;MACA,KAAAJ,IAAA,CAAAC,IAAA;MACA,KAAAD,IAAA,CAAAK,WAAA,YAAAL,IAAA,CAAAM,QAAA;IACA;IACAC,QAAA,WAAAA,CAAA;MACA,KAAAC,QAAA,CAAAC,IAAA;QACAC,EAAA,OAAAF,QAAA,CAAAG,MAAA;QACAV,IAAA,OAAAD,IAAA,CAAAC,IAAA;QACAI,WAAA,OAAAL,IAAA,CAAAK,WAAA;QACAC,QAAA,OAAAN,IAAA,CAAAM;MACA;MACAM,YAAA,CAAAC,OAAA,aAAAC,IAAA,CAAAC,SAAA,MAAAP,QAAA;IACA;IACAQ,kBAAA;MACA,MAAAC,KAAA,QAAAC,KAAA,CAAAlB,IAAA,CAAAmB,aAAA;MACA,KAAAC,SAAA,GAAAH,KAAA;MACA,OAAAA,KAAA;IACA;IACAI,WAAA;MACA,KAAApB,IAAA;MACA,KAAAmB,SAAA;IACA;IACAE,SAAAC,YAAA;MACA;MACAA,YAAA,CAAAC,cAAA;MACA;MACA,KAAAC,YAAA;IACA;IACAA,aAAA;MACA;MACA,UAAAT,iBAAA;QACA;MACA;MACA;MACA,KAAAU,cAAA,CAAAjB,IAAA,MAAAR,IAAA;MACA;MACA,KAAA0B,SAAA;QACA,KAAAC,QAAA,CAAAC,IAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAtB,QAAA,GAAAM,IAAA,CAAAiB,KAAA,CAAAnB,YAAA,CAAAoB,OAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}