{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BModal, BButton, BFormInvalidFeedback, BFormGroup, BFormInput } from \"bootstrap-vue\";\nexport default {\n  components: {\n    BModal,\n    BButton,\n    BFormInvalidFeedback,\n    BFormGroup,\n    BFormInput\n  },\n  data() {\n    return {\n      showModal: false,\n      employees: [],\n      employee: {\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\"\n      },\n      formStates: {\n        fname: null,\n        lname: null,\n        email: null,\n        password: null\n      }\n    };\n  },\n  watch: {\n    employees: {\n      handler() {\n        this.saveEmployeesToLocalStorage();\n      },\n      deep: true\n    }\n  },\n  mounted() {\n    this.retrieveEmployeesFromLocalStorage();\n  },\n  methods: {\n    getInputState(fieldName) {\n      return this.formStates[fieldName];\n    },\n    checkFormValidity() {\n      // Form validation logic\n      // Set the formStates according to the validation result\n      let isValid = true;\n      if (this.employee.firstName.trim() === \"\") {\n        this.formStates.fname = false;\n        isValid = false;\n      } else {\n        this.formStates.fname = true;\n      }\n      if (this.employee.lastName.trim() === \"\") {\n        this.formStates.lname = false;\n        isValid = false;\n      } else {\n        this.formStates.lname = true;\n      }\n      if (this.employee.email.trim() === \"\") {\n        this.formStates.email = false;\n        isValid = false;\n      } else {\n        this.formStates.email = true;\n      }\n      if (this.employee.password.trim() === \"\") {\n        this.formStates.password = false;\n        isValid = false;\n      } else {\n        this.formStates.password = true;\n      }\n      return isValid;\n    },\n    handleSubmit() {\n      if (!this.checkFormValidity()) {\n        return;\n      }\n      // Assign a new ID to the employee\n      this.employee.id = this.employees.length + 1;\n      // Push the new employee to the employees array\n      this.employees.push({\n        ...this.employee\n      });\n      // Reset the form andclear the employee data\n      this.resetModal();\n    },\n    resetModal() {\n      this.showModal = false;\n      this.employee = {\n        id: 1,\n        firstName: \"\",\n        lastName: \"\",\n        email: \"\",\n        password: \"\"\n      };\n      this.resetFormStates();\n    },\n    resetFormStates() {\n      this.formStates = {\n        fname: null,\n        lname: null,\n        email: null,\n        password: null\n      };\n    },\n    saveEmployeesToLocalStorage() {\n      localStorage.setItem(\"employees\", JSON.stringify(this.employees));\n    },\n    retrieveEmployeesFromLocalStorage() {\n      const savedEmployees = localStorage.getItem(\"employees\");\n      if (savedEmployees) {\n        this.employees = JSON.parse(savedEmployees);\n      }\n    }\n  }\n};","map":{"version":3,"names":["BModal","BButton","BFormInvalidFeedback","BFormGroup","BFormInput","components","data","showModal","employees","employee","firstName","lastName","email","password","formStates","fname","lname","watch","handler","saveEmployeesToLocalStorage","deep","mounted","retrieveEmployeesFromLocalStorage","methods","getInputState","fieldName","checkFormValidity","isValid","trim","handleSubmit","id","length","push","resetModal","resetFormStates","localStorage","setItem","JSON","stringify","savedEmployees","getItem","parse"],"sources":["src/components/EmployeeComponents/EmployeeAddingFeature.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- Button that shows the modal -->\r\n      <b-button variant=\"primary\" @click=\"showModal = true\">Add Employee</b-button>\r\n    <!-- Modal that we can add employee with -->\r\n      <b-modal\r\n      id=\"modal-prevent-closing\"\r\n      ref=\"modal\"\r\n      title=\"Add a new employee\"\r\n      @show=\"resetModal\"\r\n      @hidden=\"resetModal\"\r\n      v-model=\"showModal\"\r\n      @ok=\"handleSubmit\"\r\n    >\r\n    form that we \r\n      <form ref=\"employeeForm\">\r\n        <b-form-group label=\"First Name\" label-for=\"fname-input\" :state=\"getInputState('fname')\">\r\n          <b-form-input id=\"fname-input\" v-model=\"employee.firstName\" required :state=\"getInputState('fname')\"></b-form-input>\r\n        </b-form-group>\r\n        <b-form-group label=\"Last Name\" label-for=\"lname-input\" :state=\"getInputState('lname')\">\r\n          <b-form-input id=\"lname-input\" v-model=\"employee.lastName\" required :state=\"getInputState('lname')\"></b-form-input>\r\n        </b-form-group>\r\n        <b-form-group label=\"Email Address\" label-for=\"email-input\" :state=\"getInputState('email')\">\r\n          <b-form-input id=\"email-input\" v-model=\"employee.email\" type=\"email\" required :state=\"getInputState('email')\"></b-form-input>\r\n        </b-form-group>\r\n        <b-form-group label=\"Password\" label-for=\"pass-input\" :state=\"getInputState('password')\">\r\n          <b-form-input type=\"password\" id=\"pass-input\" v-model=\"employee.password\" required :state=\"getInputState('password')\"></b-form-input>\r\n          <b-form-invalid-feedback :state=\"getInputState('password')\">\r\n            Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.\r\n          </b-form-invalid-feedback>\r\n        </b-form-group>\r\n      </form>\r\n    </b-modal>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { BModal, BButton, BFormInvalidFeedback, BFormGroup, BFormInput } from \"bootstrap-vue\";\r\n\r\nexport default {\r\n  components: {\r\n    BModal,\r\n    BButton,\r\n    BFormInvalidFeedback,\r\n    BFormGroup,\r\n    BFormInput,\r\n  },\r\n  data() {\r\n    return {\r\n      showModal: false,\r\n      employees: [],\r\n      employee: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      },\r\n      formStates: {\r\n        fname: null,\r\n        lname: null,\r\n        email: null,\r\n        password: null\r\n      },\r\n    };\r\n  },\r\n  watch: {\r\n    employees: {\r\n      handler() {\r\n        this.saveEmployeesToLocalStorage();\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n  mounted() {\r\n    this.retrieveEmployeesFromLocalStorage();\r\n  },\r\n  methods: {\r\n    getInputState(fieldName) {\r\n      return this.formStates[fieldName];\r\n    },\r\n    checkFormValidity() {\r\n      // Form validation logic\r\n      // Set the formStates according to the validation result\r\n      let isValid = true;\r\n      if (this.employee.firstName.trim() === \"\") {\r\n        this.formStates.fname = false;\r\n        isValid = false;\r\n      } else {\r\n        this.formStates.fname = true;\r\n      }\r\n      if (this.employee.lastName.trim() === \"\") {\r\n        this.formStates.lname = false;\r\n        isValid = false;\r\n      } else {\r\n        this.formStates.lname = true;\r\n      }\r\n      if (this.employee.email.trim() === \"\") {\r\n        this.formStates.email = false;\r\n        isValid = false;\r\n      } else {\r\n        this.formStates.email = true;\r\n      }\r\n      if (this.employee.password.trim() === \"\") {\r\n        this.formStates.password = false;\r\n        isValid = false;\r\n      } else {\r\n        this.formStates.password = true;\r\n      }\r\n      return isValid;\r\n    },\r\n    handleSubmit() {\r\n      if (!this.checkFormValidity()) {\r\n        return;\r\n      }\r\n      // Assign a new ID to the employee\r\n      this.employee.id = this.employees.length + 1;\r\n      // Push the new employee to the employees array\r\n      this.employees.push({ ...this.employee });\r\n      // Reset the form andclear the employee data\r\n      this.resetModal();\r\n    },\r\n    resetModal() {\r\n      this.showModal = false;\r\n      this.employee = {\r\n        id: 1,\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      };\r\n      this.resetFormStates();\r\n    },\r\n    resetFormStates() {\r\n      this.formStates = {\r\n        fname: null,\r\n        lname: null,\r\n        email: null,\r\n        password: null,\r\n      };\r\n    },\r\n    saveEmployeesToLocalStorage() {\r\n      localStorage.setItem(\"employees\", JSON.stringify(this.employees));\r\n    },\r\n    retrieveEmployeesFromLocalStorage() {\r\n      const savedEmployees = localStorage.getItem(\"employees\");\r\n      if (savedEmployees) {\r\n        this.employees = JSON.parse(savedEmployees);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\n.header {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.logo {\r\n  margin: 0;\r\n}\r\n\r\n.employee-cards {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\r\n  grid-gap: 20px;\r\n  margin-top: 20px;\r\n}\r\n</style>"],"mappings":";AAqCA,SAAAA,MAAA,EAAAC,OAAA,EAAAC,oBAAA,EAAAC,UAAA,EAAAC,UAAA;AAEA;EACAC,UAAA;IACAL,MAAA;IACAC,OAAA;IACAC,oBAAA;IACAC,UAAA;IACAC;EACA;EACAE,KAAA;IACA;MACAC,SAAA;MACAC,SAAA;MACAC,QAAA;QACAC,SAAA;QACAC,QAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACAC,UAAA;QACAC,KAAA;QACAC,KAAA;QACAJ,KAAA;QACAC,QAAA;MACA;IACA;EACA;EACAI,KAAA;IACAT,SAAA;MACAU,QAAA;QACA,KAAAC,2BAAA;MACA;MACAC,IAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,iCAAA;EACA;EACAC,OAAA;IACAC,cAAAC,SAAA;MACA,YAAAX,UAAA,CAAAW,SAAA;IACA;IACAC,kBAAA;MACA;MACA;MACA,IAAAC,OAAA;MACA,SAAAlB,QAAA,CAAAC,SAAA,CAAAkB,IAAA;QACA,KAAAd,UAAA,CAAAC,KAAA;QACAY,OAAA;MACA;QACA,KAAAb,UAAA,CAAAC,KAAA;MACA;MACA,SAAAN,QAAA,CAAAE,QAAA,CAAAiB,IAAA;QACA,KAAAd,UAAA,CAAAE,KAAA;QACAW,OAAA;MACA;QACA,KAAAb,UAAA,CAAAE,KAAA;MACA;MACA,SAAAP,QAAA,CAAAG,KAAA,CAAAgB,IAAA;QACA,KAAAd,UAAA,CAAAF,KAAA;QACAe,OAAA;MACA;QACA,KAAAb,UAAA,CAAAF,KAAA;MACA;MACA,SAAAH,QAAA,CAAAI,QAAA,CAAAe,IAAA;QACA,KAAAd,UAAA,CAAAD,QAAA;QACAc,OAAA;MACA;QACA,KAAAb,UAAA,CAAAD,QAAA;MACA;MACA,OAAAc,OAAA;IACA;IACAE,aAAA;MACA,UAAAH,iBAAA;QACA;MACA;MACA;MACA,KAAAjB,QAAA,CAAAqB,EAAA,QAAAtB,SAAA,CAAAuB,MAAA;MACA;MACA,KAAAvB,SAAA,CAAAwB,IAAA;QAAA,QAAAvB;MAAA;MACA;MACA,KAAAwB,UAAA;IACA;IACAA,WAAA;MACA,KAAA1B,SAAA;MACA,KAAAE,QAAA;QACAqB,EAAA;QACApB,SAAA;QACAC,QAAA;QACAC,KAAA;QACAC,QAAA;MACA;MACA,KAAAqB,eAAA;IACA;IACAA,gBAAA;MACA,KAAApB,UAAA;QACAC,KAAA;QACAC,KAAA;QACAJ,KAAA;QACAC,QAAA;MACA;IACA;IACAM,4BAAA;MACAgB,YAAA,CAAAC,OAAA,cAAAC,IAAA,CAAAC,SAAA,MAAA9B,SAAA;IACA;IACAc,kCAAA;MACA,MAAAiB,cAAA,GAAAJ,YAAA,CAAAK,OAAA;MACA,IAAAD,cAAA;QACA,KAAA/B,SAAA,GAAA6B,IAAA,CAAAI,KAAA,CAAAF,cAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}